services:
  traefik:
    image: traefik:latest
    container_name: traefik
    restart: always
    command:
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--api.dashboard=true"
      - "--api.insecure=true"  # Only for local/dev
    ports:
      - "80:80"
    networks:
      - internal_backend
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      - "traefik.enable=true"
      # - "traefik.http.routers.traefik.rule=PathPrefix(`/dashboard`)"
      - "traefik.http.routers.traefik.rule=PathPrefix(`/dashboard`) || PathPrefix(`/api`)"
      # - "traefik.http.routers.traefik.rule=PathPrefix(`/dashboard`) || PathPrefix(`/traefik-api`)"
      - "traefik.http.routers.traefik.entrypoints=web"
      - "traefik.http.routers.traefik.service=api@internal"

  whoami:
    image: traefik/whoami
    container_name: whoami
    restart: always
    networks:
      - internal_backend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.whoami.rule=PathPrefix(`/whoami`)"
      - "traefik.http.routers.whoami.entrypoints=web"


  portainer_agent:
    image: portainer/agent:latest
    container_name: portainer_agent
    restart: always
    ports:
      - "9001:9001"  # Insecure if exposed to all IPs!
    networks:
      - internal_backend
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes


  postgres:
    image: postgres:latest
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: test
      POSTGRES_PASSWORD: test
      POSTGRES_DB: testdb
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - internal_backend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.postgres.rule=PathPrefix(`/db`)"
      - "traefik.http.routers.postgres.entrypoints=web"
      - "traefik.http.routers.postgres.middlewares=db-strip"
      - "traefik.http.middlewares.db-strip.stripprefix.prefixes=/db"
      - "traefik.http.services.postgres.loadbalancer.server.port=5432"  # not an HTTP port, only for test purposes


  pgadmin:
    image: dpage/pgadmin4:8.6
    container_name: pgadmin
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin123
    ports:
      - "8081:80" # Temporary Hack): Expose a dedicated port => need a domain
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - internal_backend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pgadmin.rule=PathPrefix(`/pgadmin`)"
      - "traefik.http.routers.pgadmin.entrypoints=web"
      - "traefik.http.routers.pgadmin.middlewares=pgadmin-strip"
      - "traefik.http.middlewares.pgadmin-strip.stripprefix.prefixes=/pgadmin"
      - "traefik.http.services.pgadmin.loadbalancer.server.port=80"




  backend:
    build:
      context: ./backend
    container_name: backend
    restart: always
    networks:
      - internal_backend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=PathPrefix(`/backend`)"
      - "traefik.http.routers.backend.entrypoints=web"
      - "traefik.http.services.backend.loadbalancer.server.port=8000"




volumes:
  postgres_data:
  pgadmin_data:



networks:
  internal_backend:
    name: internal_backend
    driver: bridge
